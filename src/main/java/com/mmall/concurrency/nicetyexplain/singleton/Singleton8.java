package com.mmall.concurrency.nicetyexplain.singleton;

/**
 * @Author mcg
 * @Date 2019/11/3 15:12
 * <p>
 * 枚举单例 ，推荐使用
 * 其他类使用这个 Singleton8.INSTANCE.whatever()
 **/

public enum Singleton8 {

    INSTANCE;

    public void whatever() {

    }


    /**
     * 各个单例写法对比总结，哪个更好？
     * 饿汉：简单，但是没有 lazy loading
     * 懒汉：有线程安全问题
     * 静态内部类：可用
     * 双重检查：面试用  ***
     * 枚举：最好    ***** 5星推荐
     *
     * 为什么枚举最好，在 effective java 这本书中，使用枚举实现单例的方法虽然还没有广泛采用
     *  但是氮元素的枚举类型已经成为实现 singleton 的最佳方法。
     *  写法简单；线程安全（枚举是一种特殊的类）；懒加载的，避免反序列化破坏单例
     *
     *
     *  各个方法的使用场合
     *  如果程序一开始就要加载很多的资源，那么久应该需要使用懒加载
     *   饿汉式如果对象的创建需要配置文件就不适用
     *   懒加载虽然好，但是静态内部类这种方式会引入编程复杂性
     */

    // 一些面试问题

    // 饿汉式的缺点，一上来就加载资源，但是有时候我们不需要这个，浪费
    // 懒汉式的缺点，写法复杂，容易写成线程不安全的
    // 为什么要用 double-check ？不用就不安全吗？ 详见 singleton6 的代码说明
    // 为什么双重检查模式要用 volatile （为了防止指令重排序造成线程2 NPE，也是解决了可见性的问题）

}
